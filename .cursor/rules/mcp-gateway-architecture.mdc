
# MCP Gateway PoC Architecture

This is a proof of concept for an MCP (Model Context Protocol) Gateway with Go-based Envoy external processor.

## Development Rules

**ðŸš« NO PLACEHOLDERS**: Always implement real, working functionality. No placeholder code, dummy values, or "TODO" implementations unless explicitly requested by the user. Be persistent and complete all implementations.

## Architecture Flow
```
Client -> Envoy (External Processor) -> Gateway/Ext-Proc -> Server1/Server2
```

## Core Components

### Envoy External Processor (Go gRPC Service)
- **Language**: Go (integrated into main.go)
- **Protocol**: gRPC communication with Envoy
- **Purpose**: Request/response header and body processing for MCP routing
- **Features**: 
  - Tool name stripping (`server1-timestamp` â†’ `timestamp`)
  - Session ID mapping and header rewriting
  - Body-based routing with `ClearRouteCache`
  - Content-length header correction after body modification

### MCP Gateway ([main.go](mdc:main.go))
- **Framework**: mcp-go v0.36.0 (latest with GetSessionId() method)
- **Transport**: HTTP with streamable HTTP MCP protocol
- **Dual Service**: Runs both HTTP MCP server and gRPC external processor
- **Session Management**: Per-client backend connections with real session ID extraction
- **Tool Aggregation**: Handles `initialize` and `tools/list` calls
- **Session Mapping**: Direct memory access to session mappings (no HTTP endpoints needed)

### Session ID Management
- **Gateway**: Issues gateway session IDs to clients
- **Backend Initialization**: Creates real connections to Server1/Server2, extracts actual session IDs using `client.GetSessionId()`
- **Session Mapping**: Stores gateway â†’ (server1, server2) session ID mappings in memory
- **Ext-Proc Integration**: Direct access to session mappings via `SessionMapper` interface
- **Real Sessions**: No placeholders - uses actual session IDs returned by backend servers

### Test Servers
- **Server1** ([server1/main.go](mdc:server1/main.go)): echo, timestamp, echo_headers tools
- **Server2** ([server2/main.go](mdc:server2/main.go)): dice_roll, 8_ball, echo_headers tools

## Routing via Envoy External Processor
- **Default**: `initialize` and `tools/list` -> Gateway (aggregated tools)
- **Tool-based routing**: 
  - `tools/call` with `server1-*` tools -> Direct to Server1
  - `tools/call` with `server2-*` tools -> Direct to Server2
- **Body Processing**: Tool names stripped before forwarding to backends
- **Session ID rewriting**: Ext-proc replaces gateway session IDs with backend-specific session IDs
- **Content-Length**: Automatically corrected when body is modified

## External Processor Implementation
- **Request Headers**: Capture session information
- **Request Body**: Parse JSON-RPC, extract tool names, strip prefixes, set routing headers
- **Response Headers**: Map backend session IDs back to gateway session IDs
- **Response Body**: Pass through unchanged

## Critical Examples
- https://raw.githubusercontent.com/mark3labs/mcp-go/refs/heads/main/examples/simple_client/main.go
- https://raw.githubusercontent.com/mark3labs/mcp-go/refs/heads/main/examples/everything/main.go

