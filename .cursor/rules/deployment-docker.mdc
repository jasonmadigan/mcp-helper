# Deployment & Docker Configuration

## Project Structure
- **Main Binary**: Built as `helper` (not `gateway`)
- **Module Name**: Should be `mcp-helper-poc` (update from `mcp-gateway-poc`)
- **Docker Images**: `quay.io/dmartin/mcp-helper-poc*`

## Multi-stage Dockerfile Pattern
```dockerfile
# Build stage
FROM golang:1.24-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o helper main.go

# Runtime stage  
FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /app/helper .
RUN chmod +x helper
EXPOSE 8080
EXPOSE 50051
CMD ["./helper", "-port=8080"]
```

## Docker Compose Orchestration
```yaml
version: '3.8'
services:
  envoy:
    image: envoyproxy/envoy:v1.31-latest
    ports:
      - "8080:8080"  # Main proxy port
      - "9901:9901"  # Admin interface
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml:ro
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--log-level", "debug"]
    depends_on:
      - helper

  helper:
    build: .
    image: quay.io/dmartin/mcp-helper-poc
    environment:
      - SERVER1_URL=http://server1:8081
      - SERVER2_URL=http://server2:8082

  server1:
    build: ./server1
    image: quay.io/dmartin/mcp-helper-poc-server1

  server2:
    build: ./server2  
    image: quay.io/dmartin/mcp-helper-poc-server2
```

## Envoy Configuration
```yaml
admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          http_filters:
          # External processor MUST come before router
          - name: envoy.filters.http.ext_proc
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor"
              grpc_service:
                envoy_grpc:
                  cluster_name: ext-proc
              request_header_mode: "SEND"
              response_header_mode: "SEND"
              request_body_mode: "BUFFERED"  # Not STREAMED
              response_body_mode: "BUFFERED"
          - name: envoy.filters.http.router

  clusters:
  - name: helper_cluster
    connect_timeout: 5s
    type: STRICT_DNS
    load_assignment:
      cluster_name: helper_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: helper
                port_value: 8080

  - name: ext-proc
    connect_timeout: 5s
    type: STRICT_DNS
    http2_protocol_options: {}  # Required for gRPC
    load_assignment:
      cluster_name: ext-proc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: helper  # Same container as HTTP server
                port_value: 50051

  - name: server1_cluster
    connect_timeout: 5s
    type: STRICT_DNS
    load_assignment:
      cluster_name: server1_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: server1
                port_value: 8081

  - name: server2_cluster
    connect_timeout: 5s
    type: STRICT_DNS
    load_assignment:
      cluster_name: server2_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: server2
                port_value: 8082
```

## Routing Configuration
```yaml
route_config:
  name: local_route
  virtual_hosts:
  - name: local_service
    domains: ["*"]
    routes:
    # Server1 routing - matches x-mcp-server: server1
    - match:
        prefix: "/"
        headers:
        - name: "x-mcp-server"
          string_match:
            exact: "server1"
      route:
        cluster: server1_cluster

    # Server2 routing - matches x-mcp-server: server2  
    - match:
        prefix: "/"
        headers:
        - name: "x-mcp-server"
          string_match:
            exact: "server2"
      route:
        cluster: server2_cluster

    # Default route - no x-mcp-server header, goes to helper
    - match:
        prefix: "/"
      route:
        cluster: helper_cluster
```

## Build and Run Commands
```bash
# Build all images
docker-compose build

# Run the full stack
docker-compose up --build

# View logs for specific service
docker-compose logs -f helper
docker-compose logs -f envoy

# Access points
# - Main service: http://localhost:8080
# - Envoy admin: http://localhost:9901
# - MCP Inspector: DANGEROUSLY_OMIT_AUTH=true npx @modelcontextprotocol/inspector
```

## Environment Variables
- `SERVER1_URL`: Backend server 1 URL (default: http://localhost:8081)
- `SERVER2_URL`: Backend server 2 URL (default: http://localhost:8082)
- Use `getEnv(key, defaultValue)` helper function for configuration
