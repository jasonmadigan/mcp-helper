
# Envoy Dynamic Module Development

## Dependencies
Use git dependency for SDK matching Envoy version:
```toml
envoy-proxy-dynamic-modules-rust-sdk = { git = "https://github.com/envoyproxy/envoy", rev = "73fe00fc139fd5053f4c4a5d66569cc254449896" }
```

## Module Structure
- **Entry point**: `declare_init_functions!(init, new_http_filter_config_fn)`
- **Logging**: Use `eprintln!` (visible in Envoy logs)
- **Status**: Return `Continue` status to pass requests through
- **Build target**: native (produces .so file)

## Key Patterns

### Filter Implementation
```rust
impl<EHF: EnvoyHttpFilter> HttpFilter<EHF> for Filter {
    fn on_request_headers(&mut self, envoy_filter: &mut EHF, end_of_stream: bool) -> abi::envoy_dynamic_module_type_on_http_filter_request_headers_status {
        // For requests with bodies, pause header processing
        if !end_of_stream {
            return abi::envoy_dynamic_module_type_on_http_filter_request_headers_status::StopIteration;
        }
        abi::envoy_dynamic_module_type_on_http_filter_request_headers_status::Continue
    }

    fn on_request_body(&mut self, envoy_filter: &mut EHF, end_of_stream: bool) -> abi::envoy_dynamic_module_type_on_http_filter_request_body_status {
        // Buffer body chunks until complete
        if !end_of_stream {
            return abi::envoy_dynamic_module_type_on_http_filter_request_body_status::StopIterationAndBuffer;
        }
        
        // Process complete body, set routing headers
        envoy_filter.set_request_header("x-mcp-server", route_to.as_bytes());
        envoy_filter.clear_route_cache(); // ESSENTIAL: force re-evaluation
        
        abi::envoy_dynamic_module_type_on_http_filter_request_body_status::Continue
    }
}
```

## Build Setup
- Use cargo-zigbuild for cross-compilation (x86_64, aarch64)
- Set `ENVOY_DYNAMIC_MODULES_SEARCH_PATH=/usr/local/lib`
- Library name in [Cargo.toml](mdc:envoy-filter/Cargo.toml) must match config in [envoy.yaml](mdc:envoy.yaml)

- Set `ENVOY_DYNAMIC_MODULES_SEARCH_PATH=/usr/local/lib`
- Library name in [Cargo.toml](mdc:envoy-filter/Cargo.toml) must match config in [envoy.yaml](mdc:envoy.yaml)
